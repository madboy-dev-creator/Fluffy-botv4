const axios = require("axios");
const fs = require("fs");
const path = require("path");

const fonts = {
  a: "ùñ∫", b: "ùñª", c: "ùñº", d: "ùñΩ", e: "ùñæ", f: "ùñø", g: "ùóÄ", h: "ùóÅ", i: "ùóÇ",
  j: "ùóÉ", k: "ùóÑ", l: "ùóÖ", m: "ùóÜ", n: "ùóá", o: "ùóà", p: "ùóâ", q: "ùóä", r: "ùóã",
  s: "ùóå", t: "ùóç", u: "ùóé", v: "ùóè", w: "ùóê", x: "ùóë", y: "ùóí", z: "ùóì",
  A: "ùóî", B: "ùóï", C: "ùóñ", D: "ùóó", E: "ùóò", F: "ùóô", G: "ùóö", H: "ùóõ", I: "ùóú",
  J: "ùóù", K: "ùóû", L: "ùóü", M: "ùó†", N: "ùó°", O: "ùó¢", P: "ùó£", Q: "ùó§", R: "ùó•",
  S: "ùó¶", T: "ùóß", U: "ùó®", V: "ùó©", W: "ùó™", X: "ùó´", Y: "ùó¨", Z: "ùó≠"
};

function applyFont(text) {
  return text.split('').map(char => fonts[char] || char).join('');
}

module.exports = {
  config: {
    name: "gen",
    aliases: ["generate"],
    version: "1.0",
    author: "Aesther",
    countDown: 5,
    role: 0,
    shortDescription: "G√©n√®re une image depuis un prompt",
    longDescription: "Utilise l'intelligence artificielle pour g√©n√©rer une image stylis√©e depuis un texte.",
    category: "ai",
    guide: "{pn} <prompt>"
  },

  onStart: async function ({ message, args, api, event }) {
    const prompt = args.join(" ").trim();
    const messageID = event.messageID;

    if (!prompt) {
      return message.reply(applyFont("‚úèÔ∏è Donne un prompt pour g√©n√©rer une image."));
    }

    try {
      const { data } = await axios.get(`https://api.nekorinn.my.id/ai-img/netwrck-img?text=${encodeURIComponent(prompt)}`);
      const urls = data?.result;

      if (!urls || urls.length === 0) {
        return message.reply(applyFont("‚ùå Aucune image trouv√©e."));
      }

      const images = [];
      const filePaths = [];

      for (const url of urls) {
        const imgResponse = await axios.get(url, { responseType: "arraybuffer" });
        const fileName = `gen_${Date.now()}_${Math.floor(Math.random() * 9999)}.png`;
        const filePath = path.join(__dirname, "cache", fileName);
        fs.writeFileSync(filePath, imgResponse.data);
        images.push(fs.createReadStream(filePath));
        filePaths.push(filePath);
      }

      const reply = await message.reply({
        body: applyFont(`üñºÔ∏è Prompt : ${prompt}\nü™ê Image(s) g√©n√©r√©e(s) avec succ√®s !`),
        attachment: images
      });

      api.setMessageReaction("ü™ê", messageID, () => {}, true);

      setTimeout(() => {
        for (const file of filePaths) {
          fs.unlink(file, () => {});
        }
        api.unsendMessage(reply.messageID);
      }, 2 * 60 * 1000); // 2 minutes

    } catch (error) {
      console.error(error);
      return message.reply(applyFont("‚ùå Une erreur est survenue lors de la g√©n√©ration d'image."));
    }
  }
};
